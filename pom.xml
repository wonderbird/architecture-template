<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.github.wonderbir</groupId>
    <artifactId>architecture-template</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>ArchitectureTemplate</name>
    <description>Architecture Template documentation</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <asciidoctor.maven.plugin.version>1.5.6</asciidoctor.maven.plugin.version>
        <asciidoctorj.version>1.5.6</asciidoctorj.version>
        <asciidoctorj.diagram.version>1.5.8</asciidoctorj.diagram.version>
        <asciidoctorj.pdf.version>1.5.0-alpha.16</asciidoctorj.pdf.version>
        <asciidoctorj.generated.directory>${project.build.directory}/asciidoc</asciidoctorj.generated.directory>
        <jruby.version>1.7.26</jruby.version>

        <swagger2markup.version>1.3.1</swagger2markup.version>
        <swagger2markup.plugin.version>1.3.3</swagger2markup.plugin.version>
        <swagger2markup.extension.version>1.3.1</swagger2markup.extension.version>
    </properties>

    <pluginRepositories>
        <pluginRepository>
            <id>jcenter-snapshots</id>
            <name>jcenter</name>
            <url>http://oss.jfrog.org/artifactory/oss-snapshot-local/</url>
        </pluginRepository>
        <pluginRepository>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <id>jcenter-releases</id>
            <name>jcenter</name>
            <url>http://jcenter.bintray.com</url>
        </pluginRepository>
    </pluginRepositories>

    <dependencies>
        <dependency>
            <groupId>com.structurizr</groupId>
            <artifactId>structurizr-core</artifactId>
            <version>1.0.0-RC4</version>
        </dependency>
        <dependency>
            <groupId>com.structurizr</groupId>
            <artifactId>structurizr-dot</artifactId>
            <version>1.0.0-RC4</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <!-- Documentation: http://swagger2markup.github.io/swagger2markup/1.3.1/#_usage_guide_6 -->
            <!-- https://github.com/Swagger2Markup/swagger2markup#reference-documentation -->
            <!-- https://github.com/Swagger2Markup/swagger2markup-maven-project-template/blob/master/pom.xml -->
            <plugin>
                <groupId>io.github.swagger2markup</groupId>
                <artifactId>swagger2markup-maven-plugin</artifactId>
                <version>${swagger2markup.plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>io.github.swagger2markup</groupId>
                        <artifactId>swagger2markup-import-files-ext</artifactId>
                        <version>${swagger2markup.extension.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>io.github.swagger2markup</groupId>
                        <artifactId>swagger2markup</artifactId>
                        <version>${swagger2markup.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <config>
                        <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
                        <swagger2markup.outputLanguage>EN</swagger2markup.outputLanguage>
                        <!--<swagger2markup.interDocumentCrossReferencesEnabled>true</swagger2markup.interDocumentCrossReferencesEnabled>-->
                        <!--<swagger2markup.extensions.dynamicOverview.contentPath>${project.basedir}/docs/asciidoc/extensions/overview</swagger2markup.extensions.dynamicOverview.contentPath>-->
                        <!--<swagger2markup.extensions.dynamicDefinitions.contentPath>${project.basedir}/docs/asciidoc/extensions/definitions</swagger2markup.extensions.dynamicDefinitions.contentPath>-->
                        <!--<swagger2markup.extensions.dynamicPaths.contentPath>${project.basedir}/docs/asciidoc/extensions/paths</swagger2markup.extensions.dynamicPaths.contentPath>-->
                        <!--<swagger2markup.extensions.dynamicSecurity.contentPath>${project.basedir}docs/asciidoc/extensions/security</swagger2markup.extensions.dynamicSecurity.contentPath>-->
                    </config>
                </configuration>
                <executions>
                    <execution>
                        <id>generate-pet-store-adoc</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>convertSwagger2markup</goal>
                        </goals>
                        <configuration>
                            <swaggerInput>${project.basedir}/docs/swagger/pet-store.json</swaggerInput>
                            <outputDir>${project.build.directory}/generated-asciidoc/pet-store</outputDir>
                            <config>
                                <swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>
                                <swagger2markup.anchorPrefix>pet_store_</swagger2markup.anchorPrefix>
                            </config>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <version>${asciidoctor.maven.plugin.version}</version>
                <dependencies>
                    <!-- Comment this section to use the default jruby artifact provided by the plugin -->
                    <dependency>
                        <groupId>org.jruby</groupId>
                        <artifactId>jruby-complete</artifactId>
                        <version>${jruby.version}</version>
                    </dependency>
                    <!-- Comment this section to use the default AsciidoctorJ artifact provided by the plugin -->
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj</artifactId>
                        <version>${asciidoctorj.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj-pdf</artifactId>
                        <version>${asciidoctorj.pdf.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj-diagram</artifactId>
                        <version>${asciidoctorj.diagram.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <sourceDirectory>docs</sourceDirectory>
                    <sourceDocumentName>architecture-template.adoc</sourceDocumentName>
                    <requires>
                        <require>asciidoctor-diagram</require>
                    </requires>
                    <!-- If you set baseDir to ${project.basedir}, top-level includes are resolved relative to the project root -->
                    <!--
                    <baseDir>${project.basedir}</baseDir>
                    -->
                    <!-- Attributes common to all output formats -->
                    <attributes>
                        <endpoint-url>http://example.org</endpoint-url>
                        <sourcedir>${project.build.sourceDirectory}</sourcedir>
                        <project-version>${project.version}</project-version>
                        <generated>${asciidoctorj.generated.directory}</generated>
                    </attributes>
                </configuration>
                <executions>
                    <execution>
                        <id>asciidoc-to-html</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>html5</backend>
                            <sourceHighlighter>coderay</sourceHighlighter>
                            <!--
                            Scenarios for linking vs embedding assets:

                            Link to both stylesheets and images::

                               - don't set embedAssets option
                               - set linkcss attribute to true
                               - set imagesdir attribute to path relative to AsciiDoc source file

                              <attributes>
                                  <linkcss>true</linkcss>
                                  <imagesdir>./images</imagesdir>
                              </attributes>

                            Embed stylesheets and images::

                               - set embedAssets option to true
                               - don't set linkcss attribute
                               - set imagesdir attribute to path relative to project root

                              <embedAssets>true</embedAssets>
                              <attributes>
                                  <imagesdir>docs/images</imagesdir>
                              </attributes>

                            Link to stylesheets but embed images::

                               - set embedAssets option to true
                               - set linkcss attribute to true
                               - set imagesdir attribute to path relative to project root

                              <embedAssets>true</embedAssets>
                              <attributes>
                                  <linkcss>true</linkcss>
                                  <imagesdir>docs/images</imagesdir>
                              </attributes>

                            Embed stylesheets but link images (default)::

                               - don't set embedAssets option
                               - don't set linkcss attribute
                               - set imagesdir attribute to path relative to AsciiDoc source file

                              <attributes>
                                  <imagesdir>./images</imagesdir>
                              </attributes>

                            IMPORTANT: When you enable image embedding, you must qualify the path the the imagesdir, as shown above.
                            -->
                            <attributes>
                                <imagesdir>./images</imagesdir>
                                <toc>left</toc>
                                <icons>font</icons>
                                <sectanchors>true</sectanchors>
                                <!-- set the idprefix to blank -->
                                <idprefix/>
                                <idseparator>-</idseparator>
                                <docinfo1>true</docinfo1>
                            </attributes>
                        </configuration>
                    </execution>

                    <!-- from https://github.com/asciidoctor/asciidoctor-maven-examples/blob/master/asciidoctor-pdf-example/pom.xml -->
                    <execution>
                        <id>asciidoc-to-pdf</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>pdf</backend>
                            <!-- Since 1.5.0-alpha.9 PDF back-end can use 'rouge' as well as 'coderay'
                            for source highlighting -->
                            <!-- Due to a known issue on windows, it is recommended to use 'coderay' until an new version of 'rouge' is released.
                                    see discussions: https://github.com/asciidoctor/asciidoctor-maven-examples/pull/58
                                                     https://github.com/asciidoctor/asciidoctorj-pdf/issues/3
                                                     https://github.com/jneen/rouge/issues/661
                            -->
                            <sourceHighlighter>coderay</sourceHighlighter>
                            <attributes>
                                <pdf-stylesdir>${project.basedir}/docs</pdf-stylesdir>
                                <pdf-style>custom</pdf-style>
                                <pdf-fontsdir>${project.basedir}/docs/fonts</pdf-fontsdir>
                                <imagesdir>${project.basedir}/target/generated-docs/images</imagesdir>
                                <icons>font</icons>
                                <pagenums/>
                                <toc/>
                                <idprefix/>
                                <idseparator>-</idseparator>
                            </attributes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Generate UML diagrams in javadoc using doclet: mvn javadoc:javadoc    -->
            <!-- Documentation will be placed in target/site/apidocs                   -->
            <!--                                                                       -->
            <!-- Requires you to check-out https://github.com/gboersma/uml-java-doclet -->
            <!-- and 'mvn clean install' that package first                            -->
            <!--                                                                       -->
            <!-- See also http://plantuml.com/javadoc                                  -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.4</version>
                <configuration>
                    <doclet>info.leadinglight.umljavadoclet.UmlJavaDoclet</doclet>
                    <docletArtifact>
                        <groupId>info.leadinglight</groupId>
                        <artifactId>uml-java-doclet</artifactId>
                        <version>1.0-SNAPSHOT</version>
                    </docletArtifact>
                    <!-- -linetype polyline / spline / ortho (default) -->
                    <!-- -dependencies public (default) / protected / package / private -->
                    <additionalparam/>
                    <useStandardDocletOptions>true</useStandardDocletOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <!--<phase>package</phase>-->
                        <phase>install</phase>
                        <goals>
                            <goal>javadoc</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
            NOTE: Use the maven-resources-plugin if there are assets outside the AsciiDoc source folder
                  that need to be copied to the generated-docs. The Maven plugin automatically copies
                  non-AsciiDoc files in the AsciiDoc source folder to generated-docs.
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>copy-asciidoc-resources</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>docs/resources</directory>
                                    <includes>
                                        <include>**/*.jpg</include>
                                        <include>**/*.png</include>
                                    </includes>
                                </resource>
                            </resources>
                            <outputDirectory>target/generated-docs</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            -->
        </plugins>
    </build>

</project>
